//@ sourceMappingURL=WebApiManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var CodedError, WebApiManager, logger, request, settings;

  request = require("request");

  settings = require("settings-sharelatex");

  logger = require("logger-sharelatex");

  CodedError = require("./Errors").CodedError;

  module.exports = WebApiManager = {
    joinProject: function(project_id, user, callback) {
      var headers, url, user_id;
      if (callback == null) {
        callback = function(error, project, privilegeLevel, isRestrictedUser) {};
      }
      user_id = user._id;
      logger.log({
        project_id: project_id,
        user_id: user_id
      }, "sending join project request to web");
      url = "" + settings.apis.web.url + "/project/" + project_id + "/join";
      headers = {};
      if (user.anonymousAccessToken != null) {
        headers['x-sl-anonymous-access-token'] = user.anonymousAccessToken;
      }
      return request.post({
        url: url,
        qs: {
          user_id: user_id
        },
        auth: {
          user: settings.apis.web.user,
          pass: settings.apis.web.pass,
          sendImmediately: true
        },
        json: true,
        jar: false,
        headers: headers
      }, function(error, response, data) {
        var err, _ref;
        if (error != null) {
          return callback(error);
        }
        if ((200 <= (_ref = response.statusCode) && _ref < 300)) {
          if ((data == null) || ((data != null ? data.project : void 0) == null)) {
            err = new Error('no data returned from joinProject request');
            logger.error({
              err: err,
              project_id: project_id,
              user_id: user_id
            }, "error accessing web api");
            return callback(err);
          }
          return callback(null, data.project, data.privilegeLevel, data.isRestrictedUser);
        } else if (response.statusCode === 429) {
          logger.log(project_id, user_id, "rate-limit hit when joining project");
          return callback(new CodedError("rate-limit hit when joining project", "TooManyRequests"));
        } else {
          err = new Error("non-success status code from web: " + response.statusCode);
          logger.error({
            err: err,
            project_id: project_id,
            user_id: user_id
          }, "error accessing web api");
          return callback(err);
        }
      });
    }
  };

}).call(this);
