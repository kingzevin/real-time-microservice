//@ sourceMappingURL=DrainManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var DrainManager, logger;

  logger = require("logger-sharelatex");

  module.exports = DrainManager = {
    startDrainTimeWindow: function(io, minsToDrain) {
      var drainPerMin;
      drainPerMin = io.sockets.clients().length / minsToDrain;
      return DrainManager.startDrain(io, Math.max(drainPerMin / 60, 4));
    },
    startDrain: function(io, rate) {
      var pollingInterval,
        _this = this;
      clearInterval(this.interval);
      logger.log({
        rate: rate
      }, "starting drain");
      if (rate === 0) {
        return;
      } else if (rate < 1) {
        pollingInterval = 1000 / rate;
        rate = 1;
      } else {
        pollingInterval = 1000;
      }
      return this.interval = setInterval(function() {
        return _this.reconnectNClients(io, rate);
      }, pollingInterval);
    },
    RECONNECTED_CLIENTS: {},
    reconnectNClients: function(io, N) {
      var client, drainedCount, haveDrainedNClients, _i, _len, _ref;
      drainedCount = 0;
      _ref = io.sockets.clients();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if (!this.RECONNECTED_CLIENTS[client.id]) {
          this.RECONNECTED_CLIENTS[client.id] = true;
          logger.log({
            client_id: client.id
          }, "Asking client to reconnect gracefully");
          try {
            client.emit("reconnectGracefully");
          } catch (err) {
            logger.warn({
              client_id: client.id,
              err: err
            }, "error asking client to reconnect gracefully");
          }
          drainedCount++;
        }
        haveDrainedNClients = drainedCount === N;
        if (haveDrainedNClients) {
          break;
        }
      }
      if (drainedCount < N) {
        return logger.log("All clients have been told to reconnectGracefully");
      }
    }
  };

}).call(this);
