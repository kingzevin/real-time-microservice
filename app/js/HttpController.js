//@ sourceMappingURL=HttpController.map
// Generated by CoffeeScript 1.6.0
(function() {
  var HttpController, Utils, async;

  Utils = require("./Utils");

  async = require("async");

  module.exports = HttpController = {
    _getConnectedClientView: function(ioClient, callback) {
      var client_id;
      if (callback == null) {
        callback = function(error, client) {};
      }
      client_id = ioClient.id;
      return Utils.getClientAttributes(ioClient, ["project_id", "user_id", "first_name", "last_name", "email", "connected_time"], function(error, _arg) {
        var client, connected_time, email, first_name, joined, last_name, name, project_id, user_id, _ref;
        project_id = _arg.project_id, user_id = _arg.user_id, first_name = _arg.first_name, last_name = _arg.last_name, email = _arg.email, connected_time = _arg.connected_time;
        if (error != null) {
          return callback(error);
        }
        client = {
          client_id: client_id,
          project_id: project_id,
          user_id: user_id,
          first_name: first_name,
          last_name: last_name,
          email: email,
          connected_time: connected_time
        };
        client.rooms = [];
        _ref = ioClient.manager.roomClients[client_id];
        for (name in _ref) {
          joined = _ref[name];
          if (joined && name !== "") {
            client.rooms.push(name.replace(/^\//, ""));
          }
        }
        return callback(null, client);
      });
    },
    getConnectedClients: function(req, res, next) {
      var io, ioClients;
      io = req.app.get("io");
      ioClients = io.sockets.clients();
      return async.map(ioClients, HttpController._getConnectedClientView, function(error, clients) {
        if (error != null) {
          return next(error);
        }
        return res.json(clients);
      });
    },
    getConnectedClient: function(req, res, next) {
      var client_id, io, ioClient;
      client_id = req.params.client_id;
      io = req.app.get("io");
      ioClient = io.sockets.socket(client_id);
      return HttpController._getConnectedClientView(ioClient, function(error, client) {
        if (error != null) {
          return next(error);
        }
        return res.json(client);
      });
    }
  };

}).call(this);
