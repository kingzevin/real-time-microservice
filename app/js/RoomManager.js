//@ sourceMappingURL=RoomManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var EventEmitter, IdMap, RoomEvents, RoomManager, logger, metrics;

  logger = require('logger-sharelatex');

  metrics = require("metrics-sharelatex");

  EventEmitter = require('events').EventEmitter;

  IdMap = new Map();

  RoomEvents = new EventEmitter();

  module.exports = RoomManager = {
    joinProject: function(client, project_id, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.joinEntity(client, "project", project_id, callback);
    },
    joinDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.joinEntity(client, "doc", doc_id, callback);
    },
    leaveDoc: function(client, doc_id) {
      return this.leaveEntity(client, "doc", doc_id);
    },
    leaveProjectAndDocs: function(client) {
      var entity, id, roomsToLeave, _i, _len, _results;
      roomsToLeave = this._roomsClientIsIn(client);
      logger.log({
        client: client.id,
        roomsToLeave: roomsToLeave
      }, "client leaving project");
      _results = [];
      for (_i = 0, _len = roomsToLeave.length; _i < _len; _i++) {
        id = roomsToLeave[_i];
        entity = IdMap.get(id);
        _results.push(this.leaveEntity(client, entity, id));
      }
      return _results;
    },
    emitOnCompletion: function(promiseList, eventName) {
      var result;
      result = Promise.all(promiseList);
      result.then(function() {
        return RoomEvents.emit(eventName);
      });
      return result["catch"](function(err) {
        return RoomEvents.emit(eventName, err);
      });
    },
    eventSource: function() {
      return RoomEvents;
    },
    joinEntity: function(client, entity, id, callback) {
      var beforeCount;
      beforeCount = this._clientsInRoom(client, id);
      client.join(id);
      if (beforeCount === 0) {
        logger.log({
          entity: entity,
          id: id
        }, "room is now active");
        RoomEvents.once("" + entity + "-subscribed-" + id, function(err) {
          logger.log({
            client: client.id,
            entity: entity,
            id: id,
            beforeCount: beforeCount
          }, "client joined new room and subscribed to channel");
          return callback(err);
        });
        RoomEvents.emit("" + entity + "-active", id);
        IdMap.set(id, entity);
        return metrics.gauge("room-listeners", RoomEvents.eventNames().length);
      } else {
        logger.log({
          client: client.id,
          entity: entity,
          id: id,
          beforeCount: beforeCount
        }, "client joined existing room");
        client.join(id);
        return callback();
      }
    },
    leaveEntity: function(client, entity, id) {
      var afterCount;
      if (!this._clientAlreadyInRoom(client, id)) {
        logger.warn({
          client: client.id,
          entity: entity,
          id: id
        }, "ignoring request from client to leave room it is not in");
        return;
      }
      client.leave(id);
      afterCount = this._clientsInRoom(client, id);
      logger.log({
        client: client.id,
        entity: entity,
        id: id,
        afterCount: afterCount
      }, "client left room");
      if (entity == null) {
        logger.error({
          entity: id
        }, "unknown entity when leaving with id");
        return;
      }
      if (afterCount === 0) {
        logger.log({
          entity: entity,
          id: id
        }, "room is now empty");
        RoomEvents.emit("" + entity + "-empty", id);
        IdMap["delete"](id);
        return metrics.gauge("room-listeners", RoomEvents.eventNames().length);
      }
    },
    _clientsInRoom: function(client, room) {
      var name, nsp, _ref, _ref1;
      nsp = client.namespace.name;
      name = (nsp + '/') + room;
      return (((_ref = client.manager) != null ? (_ref1 = _ref.rooms) != null ? _ref1[name] : void 0 : void 0) || []).length;
    },
    _roomsClientIsIn: function(client) {
      var fullRoomPath, prefix, room, roomList;
      roomList = (function() {
        var _ref, _ref1, _results;
        _results = [];
        for (fullRoomPath in (_ref = client.manager.roomClients) != null ? _ref[client.id] : void 0) {
          if (!(fullRoomPath !== '')) {
            continue;
          }
          _ref1 = fullRoomPath.split('/', 2), prefix = _ref1[0], room = _ref1[1];
          _results.push(room);
        }
        return _results;
      })();
      return roomList;
    },
    _clientAlreadyInRoom: function(client, room) {
      var name, nsp, _ref, _ref1;
      nsp = client.namespace.name;
      name = (nsp + '/') + room;
      return (_ref = client.manager.roomClients) != null ? (_ref1 = _ref[client.id]) != null ? _ref1[name] : void 0 : void 0;
    }
  };

}).call(this);
