//@ sourceMappingURL=AuthorizationManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var AuthorizationManager,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = AuthorizationManager = {
    assertClientCanViewProject: function(client, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return AuthorizationManager._assertClientHasPrivilegeLevel(client, ["readOnly", "readAndWrite", "owner"], callback);
    },
    assertClientCanEditProject: function(client, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return AuthorizationManager._assertClientHasPrivilegeLevel(client, ["readAndWrite", "owner"], callback);
    },
    _assertClientHasPrivilegeLevel: function(client, allowedLevels, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return client.get("privilege_level", function(error, privilegeLevel) {
        var allowed;
        if (error != null) {
          return callback(error);
        }
        allowed = (__indexOf.call(allowedLevels, privilegeLevel) >= 0);
        if (allowed) {
          return callback(null);
        } else {
          return callback(new Error("not authorized"));
        }
      });
    },
    assertClientCanViewProjectAndDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return AuthorizationManager.assertClientCanViewProject(client, function(error) {
        if (error != null) {
          return callback(error);
        }
        return AuthorizationManager._assertClientCanAccessDoc(client, doc_id, callback);
      });
    },
    assertClientCanEditProjectAndDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return AuthorizationManager.assertClientCanEditProject(client, function(error) {
        if (error != null) {
          return callback(error);
        }
        return AuthorizationManager._assertClientCanAccessDoc(client, doc_id, callback);
      });
    },
    _assertClientCanAccessDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return client.get("doc:" + doc_id, function(error, status) {
        if (error != null) {
          return callback(error);
        }
        if ((status != null) && status === "allowed") {
          return callback(null);
        } else {
          return callback(new Error("not authorized"));
        }
      });
    },
    addAccessToDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return client.set("doc:" + doc_id, "allowed", callback);
    },
    removeAccessToDoc: function(client, doc_id, callback) {
      if (callback == null) {
        callback = function(error) {};
      }
      return client.del("doc:" + doc_id, callback);
    }
  };

}).call(this);
