//@ sourceMappingURL=ChannelManager.map
// Generated by CoffeeScript 1.6.0
(function() {
  var ChannelManager, ClientMap, logger, metrics, settings;

  logger = require('logger-sharelatex');

  metrics = require("metrics-sharelatex");

  settings = require("settings-sharelatex");

  ClientMap = new Map();

  module.exports = ChannelManager = {
    getClientMapEntry: function(rclient) {
      return ClientMap.get(rclient) || ClientMap.set(rclient, new Map()).get(rclient);
    },
    subscribe: function(rclient, baseChannel, id) {
      var channel, clientChannelMap, subscribePromise;
      clientChannelMap = this.getClientMapEntry(rclient);
      channel = "" + baseChannel + ":" + id;
      if (clientChannelMap.has(channel)) {
        logger.warn({
          channel: channel
        }, "subscribe already actioned");
        return clientChannelMap.get(channel);
      } else {
        subscribePromise = rclient.subscribe(channel);
        clientChannelMap.set(channel, subscribePromise);
        logger.log({
          channel: channel
        }, "subscribed to new channel");
        metrics.inc("subscribe." + baseChannel);
        return subscribePromise;
      }
    },
    unsubscribe: function(rclient, baseChannel, id) {
      var channel, clientChannelMap;
      clientChannelMap = this.getClientMapEntry(rclient);
      channel = "" + baseChannel + ":" + id;
      if (!clientChannelMap.has(channel)) {
        return logger.error({
          channel: channel
        }, "not subscribed - shouldn't happen");
      } else {
        rclient.unsubscribe(channel);
        clientChannelMap["delete"](channel);
        logger.log({
          channel: channel
        }, "unsubscribed from channel");
        return metrics.inc("unsubscribe." + baseChannel);
      }
    },
    publish: function(rclient, baseChannel, id, data) {
      var channel;
      if (id === 'all' || !settings.publishOnIndividualChannels) {
        channel = baseChannel;
      } else {
        channel = "" + baseChannel + ":" + id;
      }
      return rclient.publish(channel, data);
    }
  };

}).call(this);
